%% rolling graph
% computing network measures using rolling window %
clf
Degree_struct = struct;
Pgrank_struct = struct;
Closeness_struct = struct;
Eigenvector_struct = struct;
Betweenness_struct = struct;
T = length(Tt_bankcds2);
WS = 180;
j = 0;
v = 0;
for i=1:T-WS
    j = j+1;
    [A,pval]=corrcoef(Tt_bankcds2(i:i+WS-1,:));
    for k = 1:length(A)
        for g = 1:length(A)
            if pval(k,g) > 0.01
            A(k,g)=0;
            end
        end
    end    
    for x = 1:20
        for s = 1:20
             if x==s 
                  A(x,s)=0;
             end
        end
     end
    for i1 = 1:20
    for j1 = 1:20
        if A(i1,j1) < 0.01
            A(i1,j1)=0;
        end
    end
    end
    % compute graph %
    G = graph(A,{'bar','hsb','lly','deu','bnp','mps','bsa','agr','com','ing','ska','dan','por','bay','sve','sco','mil','lav','ers','last'},"upper");
    % computing, saving network measures and tracking outliers %
    pg_ranks = centrality(G,'pagerank');
    G.Nodes.PageRank = pg_ranks;
    Epagerank(j) = nanmean(pg_ranks);
    Mpagerank(j) = nanmedian(pg_ranks);
    c_pg(j) = mean(double(isoutlier(pg_ranks)));
    degree = centrality(G,'degree');
    G.Nodes.Degree = degree;
    Edegree(j) = nanmean(degree);
    MEdegree(j) = nanmedian(degree);
    c_deg(j) = mean(double(isoutlier(degree)));
    betweenness = centrality(G,'betweenness');
    G.Nodes.Betweenness = betweenness;
    Ebetweenness(j) = nanmean(betweenness);
    Mbetweenness(j) = nanmedian(betweenness);
    c_btw(j) = mean(double(isoutlier(betweenness)));
    closeness = centrality(G,'closeness');
    G.Nodes.Closeness = closeness;
    Ecloseness(j) = nanmean(closeness);
    Mcloseness(j) = nanmedian(closeness);
    c_clo(j) = mean(double(isoutlier(closeness)));
    eigenvector = centrality(G,'eigenvector');
    G.Nodes.Eigenvector = eigenvector;
    Eeigenvector(j) = nanmean(eigenvector);
    Meigenvector(j) = nanmedian(eigenvector);
    c_eig(j) = mean(double(isoutlier(eigenvector)));
    % save the graphs obj for the highest/lowest corr period (eventually
    % save the min & max period corr
    if j == indicemin
        Gmin = G;
        Amin = A;
    end
    if j == indicemax
        Gmax = G;
        Amax = A;
    end
% saving obs in objects
cont(j) = string(j);
field1(j) = "obs" + cont(j);
Betweenness_struct = setfield(Betweenness_struct,field1(j),G.Nodes(:,"Betweenness"));
Closeness_struct = setfield(Closeness_struct,field1(j),G.Nodes(:,"Closeness"));
Degree_struct = setfield(Degree_struct,field1(j),G.Nodes(:,"Degree"));
Eigenvector_struct = setfield(Eigenvector_struct,field1(j),G.Nodes(:,"Eigenvector"));
Pgrank_struct = setfield(Pgrank_struct,field1(j),G.Nodes(:,"PageRank"));
end
names00 = G.Nodes(:,"Name");
dateplot = date_vector(181:end);
figure('Name','close this figure')
